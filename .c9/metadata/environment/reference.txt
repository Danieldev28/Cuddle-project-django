{"changed":true,"filter":false,"title":"reference.txt","tooltip":"/reference.txt","value":"A project violating any of these requirements will FAIL\n\nDjango Full Stack Project: Build a Django project backend by a relational database to create a website that allows users to store and manipulate data records about a particular domain.\nMultiple Apps: The project must be a brand new Django project, composed of multiple apps (an app for each potentially reusable component in your project).\nData Modeling: Put some effort into designing a relational database schema well-suited for your domain. Make sure to put some thought into the relationships between entities. Create at least 2 custom django models beyond the examples shown on the course\nUser Authentication: The project should include an authentication mechanism, allowing a user to register and log in, and there should be a good reason as to why the users would need to do so. e.g., a user would have to register to persist their shopping cart between sessions (otherwise it would be lost).\nUser Interaction: Include at least one form with validation that will allow users to create and edit models in the backend (in addition to the authentication mechanism).\nUse of Stripe: At least one of your Django apps should contain some e-commerce functionality using Stripe. This may be a shopping cart checkout, subscription-based payments or single payments, donations, etc. After paying successfully, the user would then gain access to additional functionality/content on the site. Note that for this project you should use Stripe's test functionality, rather than actual live payments.\nStructure and Navigation: Incorporate a main navigation menu and structured layout (you might want to use Bootstrap to accomplish this).\nUse of JavaScript: The frontend should contain some JavaScript logic you have written to enhance the user experience.\nDocumentation: Write a README.md file for your project that explains what the project does and the value that it provides to its users.\nVersion Control: Use Git & GitHub for version control.\nAttribution: Maintain clear separation between code written by you and code from external sources (e.g. libraries or tutorials). Attribute any code from external sources to its source via comments above the code and (for larger dependencies) in the README.\nDeployment: Deploy the final version of your code to a hosting platform such as Heroku.\nSecurity: Make sure to not include any passwords or secret keys in the project repository. Make sure to turn off the Django DEBUG mode, which could expose secrets.\n\n\n\n\n\n\nAssessment Criteria\nYour Full-stack Django project will be assessed based on the following criteria:\n\nUsability and Visual Impact:\nProject Purpose\nUX design\nSuitability for purpose\nNavigation\nEase of use\nInformation Architecture\nDefensive Design\nLayout and Visual Impact:\nResponsive Design\nImage Presentation\nColour scheme and typography\nCode Quality:\nAppropriate use of HTML\nAppropriate use of CSS\nAppropriate use of JavaScript\nAppropriate use of Python\nAppropriate use of the template language\nAppropriate use of Django\nApplication Features:\nApp logic\nCross-app logic\nE-commerce\nAuthentication and Security\nSoftware Development practices:\nDirectory Structure and File Naming\nVersion control\nTesting implementation\nTesting write-up\nReadme file\nComments\nData store integration\nDeployment implementation\nDeployment write-up\nExplanation of Assessment Marks\nOnce you submit your milestone project, it will be reviewed by an external assessor and graded based on a particular set of criteria, specific to each module. On each criterion, the assessor will review how your project meets this criterion and award you a mark between 0 to 5:\n\n0 marks - Entirely missing\nThe requirements for this criterion were completely ignored\n1 mark - Non Functioning\nThe criterion is only partially implemented and remains essentially non functioning\n2 marks - Fails to Meet Expectations\nThe criterion is mostly satisfied but has significant technical issues or other flaws\n3 marks - Meets Expectations\nThe criterion is fully satisfied without any significant issues, but is otherwise simple and doesn’t demonstrate any striving for excellence\n4 marks - Exceeds Expectations\nThe criterion is satisfied in a fully professional manner and demonstrating that the student strived for excellence, even if there are perhaps 1 or 2 minor issues.\n5 marks - Greatly Exceeds Expectations\nThe criterion was implemented flawlessly, exhibiting a well-planned approach and excellent execution; this project should be showcased for other students to learn from.\n\n\n\n\n\n\n\n\nProject Requirements\nMain Technologies\nHTML, CSS, JavaScript, Python+Django\n\nRelational database (recommending MySQL or Postgres)\n\nStripe payments\n\nAdditional libraries and APIs\n\nMandatory Requirements\nA project violating any of these requirements will FAIL\n\nDjango Full Stack Project: Build a Django project backend by a relational database to create a website that allows users to store and manipulate data records about a particular domain.\nMultiple Apps: The project must be a brand new Django project, composed of multiple apps (an app for each potentially reusable component in your project).\nData Modeling: Put some effort into designing a relational database schema well-suited for your domain. Make sure to put some thought into the relationships between entities. Create at least 2 custom django models beyond the examples shown on the course\nUser Authentication: The project should include an authentication mechanism, allowing a user to register and log in, and there should be a good reason as to why the users would need to do so. e.g., a user would have to register to persist their shopping cart between sessions (otherwise it would be lost).\nUser Interaction: Include at least one form with validation that will allow users to create and edit models in the backend (in addition to the authentication mechanism).\nUse of Stripe: At least one of your Django apps should contain some e-commerce functionality using Stripe. This may be a shopping cart checkout, subscription-based payments or single payments, donations, etc. After paying successfully, the user would then gain access to additional functionality/content on the site. Note that for this project you should use Stripe's test functionality, rather than actual live payments.\nStructure and Navigation: Incorporate a main navigation menu and structured layout (you might want to use Bootstrap to accomplish this).\nUse of JavaScript: The frontend should contain some JavaScript logic you have written to enhance the user experience.\nDocumentation: Write a README.md file for your project that explains what the project does and the value that it provides to its users.\nVersion Control: Use Git & GitHub for version control.\nAttribution: Maintain clear separation between code written by you and code from external sources (e.g. libraries or tutorials). Attribute any code from external sources to its source via comments above the code and (for larger dependencies) in the README.\nDeployment: Deploy the final version of your code to a hosting platform such as Heroku.\nSecurity: Make sure to not include any passwords or secret keys in the project repository. Make sure to turn off the Django DEBUG mode, which could expose secrets.\n\n\n\n\n\n\nProject Example Idea 2\nBuild a site to sell your graphic design services\n\n External user’s goal:\nUsers are able to purchase graphical designs to address their needs\n\nSite owner's goal:\nEarn money for doing freelance design work\n\nPotential features to include:\nShowcase prior work for clients, based on different kinds of requests, and the customer's testimonials.\n\nAllow users to order a particular graphic to suit their goals. The user would fill out a form describing their needs, including fields such as type (e.g. icon, logo, poster), size and description, get an automatic quote and then pay. You may want to include a javascript calculator to display a preview of the quote, but make sure that the final price is determined on the server, and cannot be manipulated directly by the user.\n\nThe site owner, logging in as a special user, would be able to see a list of all orders, and then upload their completed work which would be made available to the customer.\n\nAdvanced potential feature (nice-to-have)\nThe customer then has the option to either accept the result, or request a round of changes.\n\n Once the customer accepts, they would write a testimonial and the final graphic would be automatically included in the site's showcase.\n\n Build a custom js display mechanism for the gallery page - e.g. your own unique kind of carousel.","undoManager":{"mark":-2,"position":3,"stack":[[{"start":{"row":0,"column":0},"end":{"row":125,"column":98},"action":"insert","lines":["A project violating any of these requirements will FAIL","","Django Full Stack Project: Build a Django project backend by a relational database to create a website that allows users to store and manipulate data records about a particular domain.","Multiple Apps: The project must be a brand new Django project, composed of multiple apps (an app for each potentially reusable component in your project).","Data Modeling: Put some effort into designing a relational database schema well-suited for your domain. Make sure to put some thought into the relationships between entities. Create at least 2 custom django models beyond the examples shown on the course","User Authentication: The project should include an authentication mechanism, allowing a user to register and log in, and there should be a good reason as to why the users would need to do so. e.g., a user would have to register to persist their shopping cart between sessions (otherwise it would be lost).","User Interaction: Include at least one form with validation that will allow users to create and edit models in the backend (in addition to the authentication mechanism).","Use of Stripe: At least one of your Django apps should contain some e-commerce functionality using Stripe. This may be a shopping cart checkout, subscription-based payments or single payments, donations, etc. After paying successfully, the user would then gain access to additional functionality/content on the site. Note that for this project you should use Stripe's test functionality, rather than actual live payments.","Structure and Navigation: Incorporate a main navigation menu and structured layout (you might want to use Bootstrap to accomplish this).","Use of JavaScript: The frontend should contain some JavaScript logic you have written to enhance the user experience.","Documentation: Write a README.md file for your project that explains what the project does and the value that it provides to its users.","Version Control: Use Git & GitHub for version control.","Attribution: Maintain clear separation between code written by you and code from external sources (e.g. libraries or tutorials). Attribute any code from external sources to its source via comments above the code and (for larger dependencies) in the README.","Deployment: Deploy the final version of your code to a hosting platform such as Heroku.","Security: Make sure to not include any passwords or secret keys in the project repository. Make sure to turn off the Django DEBUG mode, which could expose secrets.","","","","Assessment Criteria","Your Full-stack Django project will be assessed based on the following criteria:","","Usability and Visual Impact:","Project Purpose","UX design","Suitability for purpose","Navigation","Ease of use","Information Architecture","Defensive Design","Layout and Visual Impact:","Responsive Design","Image Presentation","Colour scheme and typography","Code Quality:","Appropriate use of HTML","Appropriate use of CSS","Appropriate use of JavaScript","Appropriate use of Python","Appropriate use of the template language","Appropriate use of Django","Application Features:","App logic","Cross-app logic","E-commerce","Authentication and Security","Software Development practices:","Directory Structure and File Naming","Version control","Testing implementation","Testing write-up","Readme file","Comments","Data store integration","Deployment implementation","Deployment write-up","Explanation of Assessment Marks","Once you submit your milestone project, it will be reviewed by an external assessor and graded based on a particular set of criteria, specific to each module. On each criterion, the assessor will review how your project meets this criterion and award you a mark between 0 to 5:","","0 marks - Entirely missing","The requirements for this criterion were completely ignored","1 mark - Non Functioning","The criterion is only partially implemented and remains essentially non functioning","2 marks - Fails to Meet Expectations","The criterion is mostly satisfied but has significant technical issues or other flaws","3 marks - Meets Expectations","The criterion is fully satisfied without any significant issues, but is otherwise simple and doesn’t demonstrate any striving for excellence","4 marks - Exceeds Expectations","The criterion is satisfied in a fully professional manner and demonstrating that the student strived for excellence, even if there are perhaps 1 or 2 minor issues.","5 marks - Greatly Exceeds Expectations","The criterion was implemented flawlessly, exhibiting a well-planned approach and excellent execution; this project should be showcased for other students to learn from.","","","","","","Project Requirements","Main Technologies","HTML, CSS, JavaScript, Python+Django","","Relational database (recommending MySQL or Postgres)","","Stripe payments","","Additional libraries and APIs","","Mandatory Requirements","A project violating any of these requirements will FAIL","","Django Full Stack Project: Build a Django project backend by a relational database to create a website that allows users to store and manipulate data records about a particular domain.","Multiple Apps: The project must be a brand new Django project, composed of multiple apps (an app for each potentially reusable component in your project).","Data Modeling: Put some effort into designing a relational database schema well-suited for your domain. Make sure to put some thought into the relationships between entities. Create at least 2 custom django models beyond the examples shown on the course","User Authentication: The project should include an authentication mechanism, allowing a user to register and log in, and there should be a good reason as to why the users would need to do so. e.g., a user would have to register to persist their shopping cart between sessions (otherwise it would be lost).","User Interaction: Include at least one form with validation that will allow users to create and edit models in the backend (in addition to the authentication mechanism).","Use of Stripe: At least one of your Django apps should contain some e-commerce functionality using Stripe. This may be a shopping cart checkout, subscription-based payments or single payments, donations, etc. After paying successfully, the user would then gain access to additional functionality/content on the site. Note that for this project you should use Stripe's test functionality, rather than actual live payments.","Structure and Navigation: Incorporate a main navigation menu and structured layout (you might want to use Bootstrap to accomplish this).","Use of JavaScript: The frontend should contain some JavaScript logic you have written to enhance the user experience.","Documentation: Write a README.md file for your project that explains what the project does and the value that it provides to its users.","Version Control: Use Git & GitHub for version control.","Attribution: Maintain clear separation between code written by you and code from external sources (e.g. libraries or tutorials). Attribute any code from external sources to its source via comments above the code and (for larger dependencies) in the README.","Deployment: Deploy the final version of your code to a hosting platform such as Heroku.","Security: Make sure to not include any passwords or secret keys in the project repository. Make sure to turn off the Django DEBUG mode, which could expose secrets.","","","","Project Example Idea 2","Build a site to sell your graphic design services",""," External user’s goal:","Users are able to purchase graphical designs to address their needs","","Site owner's goal:","Earn money for doing freelance design work","","Potential features to include:","Showcase prior work for clients, based on different kinds of requests, and the customer's testimonials.","","Allow users to order a particular graphic to suit their goals. The user would fill out a form describing their needs, including fields such as type (e.g. icon, logo, poster), size and description, get an automatic quote and then pay. You may want to include a javascript calculator to display a preview of the quote, but make sure that the final price is determined on the server, and cannot be manipulated directly by the user.","","The site owner, logging in as a special user, would be able to see a list of all orders, and then upload their completed work which would be made available to the customer.","","Advanced potential feature (nice-to-have)","The customer then has the option to either accept the result, or request a round of changes.",""," Once the customer accepts, they would write a testimonial and the final graphic would be automatically included in the site's showcase.",""," Build a custom js display mechanism for the gallery page - e.g. your own unique kind of carousel."],"id":2}],[{"start":{"row":103,"column":0},"end":{"row":104,"column":0},"action":"insert","lines":["",""],"id":3},{"start":{"row":104,"column":0},"end":{"row":105,"column":0},"action":"insert","lines":["",""]},{"start":{"row":105,"column":0},"end":{"row":106,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":74,"column":0},"end":{"row":75,"column":0},"action":"insert","lines":["",""],"id":4},{"start":{"row":75,"column":0},"end":{"row":76,"column":0},"action":"insert","lines":["",""]},{"start":{"row":76,"column":0},"end":{"row":77,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":17,"column":0},"end":{"row":18,"column":0},"action":"insert","lines":["",""],"id":5},{"start":{"row":18,"column":0},"end":{"row":19,"column":0},"action":"insert","lines":["",""]},{"start":{"row":19,"column":0},"end":{"row":20,"column":0},"action":"insert","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":1479.5,"scrollleft":0,"selection":{"start":{"row":97,"column":32},"end":{"row":97,"column":32},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":139,"mode":"ace/mode/text"}},"timestamp":1604186325083}